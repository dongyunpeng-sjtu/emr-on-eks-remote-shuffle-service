# // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# // SPDX-License-Identifier: MIT-0
apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: tpcds-benchmark-oss
  namespace: oss
spec:
  type: Scala
  mode: cluster
  image: 021732063925.dkr.ecr.us-east-1.amazonaws.com/rss-spark-benchmark:spark3.2.0
  imagePullPolicy: Always
  sparkVersion: 3.2.0
  mainClass: com.amazonaws.eks.tpcds.BenchmarkSQL
  mainApplicationFile: local:///opt/spark/examples/jars/eks-spark-benchmark-assembly-1.0.jar
  arguments:
  # TPC-DS data localtion
    - "s3://$(BUCKET_PARAM)/BLOG_TPCDS-TEST-3T-partitioned"
  # results location
    - "s3://$(BUCKET_PARAM)/OSS_TPCDS-TEST-3T-RESULT"
  # Path to kit in the docker image
    - "/opt/tpcds-kit/tools"
  # Data Format
    - "parquet"
  # Scale factor (in GB)
    - "3000"
  # Number of iterations
    - "1"
  # Optimize queries with hive tables
    - "false"
  # Filter queries, will run all if empty - "q98-v2.4,q99-v2.4,ss_max-v2.4,q95-v2.4"
    - "" 
  # Logging set to WARN
    - "true"
  sparkConf:
    "spark.network.timeout": "2000s"
    "spark.executor.heartbeatInterval": "300s"
    # AQE
    "spark.sql.adaptive.enabled": "true"
    "spark.sql.adaptive.localShuffleReader.enabled": "true"
    "spark.sql.adaptive.coalescePartitions.enabled": "true"
    "spark.sql.adaptive.skewJoin.enabled": "true"
    # "spark.sql.adaptive.logLevel": "WARN"      
    # IRSA for S3 connection
    "spark.kubernetes.executor.podNamePrefix": "oss-spark-tpcds"
    "spark.hadoop.fs.s3a.aws.credentials.provider": "com.amazonaws.auth.WebIdentityTokenCredentialsProvider"
    "spark.hadoop.fs.s3.impl": "org.apache.hadoop.fs.s3a.S3AFileSystem"
    "spark.hadoop.mapreduce.fileoutputcommitter.algorithm.version": "2" 

    "spark.shuffle.manager": "org.apache.spark.shuffle.RssShuffleManager"
    "spark.shuffle.rss.serviceRegistry.type": "serverSequence"
    "spark.shuffle.rss.serverSequence.connectionString": "rss-%s.rss.remote-shuffle-service.svc.cluster.local:9338"
    "spark.shuffle.rss.serverSequence.startIndex": "0"
    "spark.shuffle.rss.serverSequence.endIndex": "9"
    "spark.serializer": "org.apache.spark.serializer.KryoSerializer"
    "spark.dynamicAllocation.enabled": "true"
    "spark.dynamicAllocation.minExecutors": "1"
    "spark.dynamicAllocation.maxExecutors": "50"
    "spark.dynamicAllocation.shuffleTracking.enabled": "true"
    "spark.dynamicAllocation.shuffleTracking.timeout": "1"

    # Keep pods in a single AZ 
    # "spark.kubernetes.node.selector.topology.kubernetes.io/zone": "us-east-1b"
    # "spark.kubernetes.node.selector.eks.amazonaws.com/nodegroup": "c54"
    # # turn on prometheus
    # "spark.ui.prometheus.enabled": "true"
    # "spark.executor.processTreeMetrics.enabled": "true"
    # "spark.kubernetes.driver.annotation.prometheus.io/scrape": "true"
    # "spark.kubernetes.driver.annotation.prometheus.io/path": "/metrics/executors/prometheus/"
    # "spark.kubernetes.driver.annotation.prometheus.io/port": "4040"
    # "spark.kubernetes.driver.service.annotation.prometheus.io/scrape": "true"
    # "spark.kubernetes.driver.service.annotation.prometheus.io/path": "/metrics/driver/prometheus/"
    # "spark.kubernetes.driver.service.annotation.prometheus.io/port": "4040"
    # "spark.metrics.conf.*.sink.prometheusServlet.class": "org.apache.spark.metrics.sink.PrometheusServlet"
    # "spark.metrics.conf.*.sink.prometheusServlet.path": "/metrics/driver/prometheus/"
    # "spark.metrics.conf.master.sink.prometheusServlet.path": "/metrics/master/prometheus/"
    # "spark.metrics.conf.applications.sink.prometheusServlet.path": "/metrics/applications/prometheus/"
  driver:
    initContainers:  
    - name: volume-permission
      image: public.ecr.aws/y4g4v0z7/busybox
      command: ['sh', '-c', 'mkdir /ossdata1; chown -R 1000:1000 /ossdata*']
      volumeMounts:
        - name: spark-local-dir-1
          mountPath: /ossdata1
        # - name: spark-local-dir-2
        #   mountPath: /ossdata2
        # - name: spark-local-dir-3
        #   mountPath: /ossdata3
        # - name: spark-local-dir-4
        #   mountPath: /ossdata4  
    env:
      - name: BUCKET_PARAM
        valueFrom:
          configMapKeyRef:
            name: special-config
            key: codeBucket   
    cores: 4
    coreLimit: "4.1"
    memory: "5g"
    memoryOverhead: "1000"
    serviceAccount: oss 
    volumeMounts:
      - name: spark-local-dir-1
        mountPath: /ossdata1
      # - name: spark-local-dir-2
      #   mountPath: /ossdata2
      # - name: spark-local-dir-3
      #   mountPath: /ossdata3
      # - name: spark-local-dir-4
      #   mountPath: /ossdata4  
  executor:
    initContainers:  
    - name: volume-permission
      image: public.ecr.aws/y4g4v0z7/busybox
      command: ['sh', '-c', 'mkdir /ossdata1; chown -R 1000:1000 /ossdata*']
      volumeMounts:
        - name: spark-local-dir-1
          mountPath: /ossdata1
        # - name: spark-local-dir-2
        #   mountPath: /ossdata2
        # - name: spark-local-dir-3
        #   mountPath: /ossdata3
        # - name: spark-local-dir-4
        #   mountPath: /ossdata4  
    cores: 4
    coreLimit: "4.3"
    memory: "6g"
    memoryOverhead: "2g"
    # 8 executors per node  
    # instances: 47
    volumeMounts:
      - name: spark-local-dir-1
        mountPath: /ossdata1
  #     - name: spark-local-dir-2
  #       mountPath: /ossdata2
  #     - name: spark-local-dir-3
  #       mountPath: /ossdata3
  #     - name: spark-local-dir-4
  #       mountPath: /ossdata4   
  volumes:
    - name: spark-local-dir-1
      hostPath:
        path: /local1
    # - name: spark-local-dir-2
    #   hostPath:
    #     path: /local2
    # - name: spark-local-dir-3
    #   hostPath:
    #     path: /local3
    # - name: spark-local-dir-4
    #   hostPath:
    #     path: /local4

  restartPolicy:
    type: Never